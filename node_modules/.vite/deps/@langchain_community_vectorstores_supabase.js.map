{
  "version": 3,
  "sources": ["../../binary-search/index.js", "../../num-sort/index.js", "../../@langchain/core/dist/retrievers/index.js", "../../@langchain/core/dist/vectorstores.js", "../../@langchain/core/dist/documents/document.js", "../../ml-distance/src/similarities/czekanowski.ts", "../../ml-distance/src/distances/dice.ts", "../../ml-distance/src/distances/intersection.ts", "../../ml-distance/src/similarities/kumarHassebrook.ts", "../../ml-distance/src/distances/kulczynski.ts", "../../ml-distance/src/distances/motyka.ts", "../../ml-distance/src/distances/squaredChord.ts", "../../ml-distance/src/similarities/tanimoto.ts", "../../ml-distance/src/similarities.ts", "../../ml-tree-similarity/src/index.js", "../../ml-tree-similarity/src/createTree.js", "../../ml-tree-similarity/src/getSimilarity.js", "../../ml-distance/src/similarities/cosine.ts", "../../ml-distance/src/similarities/dice.ts", "../../ml-distance/src/similarities/intersection.ts", "../../ml-distance/src/similarities/kulczynski.ts", "../../ml-distance/src/similarities/motyka.ts", "../../is-any-array/src/index.ts", "../../ml-array-sum/lib-es6/index.js", "../../ml-array-mean/lib-es6/index.js", "../../ml-distance/src/similarities/pearson.ts", "../../ml-distance/src/similarities/squaredChord.ts", "../../@langchain/core/dist/utils/math.js", "../../@langchain/community/dist/vectorstores/supabase.js"],
  "sourcesContent": ["module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n", "'use strict';\n\nfunction assertNumber(number) {\n\tif (typeof number !== 'number') {\n\t\tthrow new TypeError('Expected a number');\n\t}\n}\n\nexports.ascending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\n\tif (Number.isNaN(left)) {\n\t\treturn -1;\n\t}\n\n\tif (Number.isNaN(right)) {\n\t\treturn 1;\n\t}\n\n\treturn left - right;\n};\n\nexports.descending = (left, right) => {\n\tassertNumber(left);\n\tassertNumber(right);\n\n\tif (Number.isNaN(left)) {\n\t\treturn 1;\n\t}\n\n\tif (Number.isNaN(right)) {\n\t\treturn -1;\n\t}\n\n\treturn right - left;\n};\n", "import { CallbackManager, parseCallbackConfigArg, } from \"../callbacks/manager.js\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { ensureConfig } from \"../runnables/config.js\";\n/**\n * Abstract base class for a Document retrieval system. A retrieval system\n * is defined as something that can take string queries and return the\n * most 'relevant' Documents from some source.\n */\nexport class BaseRetriever extends Runnable {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callbacks = fields?.callbacks;\n        this.tags = fields?.tags ?? [];\n        this.metadata = fields?.metadata ?? {};\n        this.verbose = fields?.verbose ?? false;\n    }\n    /**\n     * TODO: This should be an abstract method, but we'd like to avoid breaking\n     * changes to people currently using subclassed custom retrievers.\n     * Change it on next major release.\n     */\n    _getRelevantDocuments(_query, _callbacks) {\n        throw new Error(\"Not implemented!\");\n    }\n    async invoke(input, options) {\n        return this.getRelevantDocuments(input, ensureConfig(options));\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     *\n     * Main method used to retrieve relevant documents. It takes a query\n     * string and an optional configuration object, and returns a promise that\n     * resolves to an array of `Document` objects. This method handles the\n     * retrieval process, including starting and ending callbacks, and error\n     * handling.\n     * @param query The query string to retrieve relevant documents for.\n     * @param config Optional configuration object for the retrieval process.\n     * @returns A promise that resolves to an array of `Document` objects.\n     */\n    async getRelevantDocuments(query, config) {\n        const parsedConfig = ensureConfig(parseCallbackConfigArg(config));\n        const callbackManager_ = await CallbackManager.configure(parsedConfig.callbacks, this.callbacks, parsedConfig.tags, this.tags, parsedConfig.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleRetrieverStart(this.toJSON(), query, parsedConfig.runId, undefined, undefined, undefined, parsedConfig.runName);\n        try {\n            const results = await this._getRelevantDocuments(query, runManager);\n            await runManager?.handleRetrieverEnd(results);\n            return results;\n        }\n        catch (error) {\n            await runManager?.handleRetrieverError(error);\n            throw error;\n        }\n    }\n}\n", "import { BaseRetriever, } from \"./retrievers/index.js\";\nimport { Serializable } from \"./load/serializable.js\";\n/**\n * Class for performing document retrieval from a VectorStore. Can perform\n * similarity search or maximal marginal relevance search.\n */\nexport class VectorStoreRetriever extends BaseRetriever {\n    static lc_name() {\n        return \"VectorStoreRetriever\";\n    }\n    get lc_namespace() {\n        return [\"langchain_core\", \"vectorstores\"];\n    }\n    _vectorstoreType() {\n        return this.vectorStore._vectorstoreType();\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"vectorStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"searchType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"similarity\"\n        });\n        Object.defineProperty(this, \"searchKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStore = fields.vectorStore;\n        this.k = fields.k ?? this.k;\n        this.searchType = fields.searchType ?? this.searchType;\n        this.filter = fields.filter;\n        if (fields.searchType === \"mmr\") {\n            this.searchKwargs = fields.searchKwargs;\n        }\n    }\n    async _getRelevantDocuments(query, runManager) {\n        if (this.searchType === \"mmr\") {\n            if (typeof this.vectorStore.maxMarginalRelevanceSearch !== \"function\") {\n                throw new Error(`The vector store backing this retriever, ${this._vectorstoreType()} does not support max marginal relevance search.`);\n            }\n            return this.vectorStore.maxMarginalRelevanceSearch(query, {\n                k: this.k,\n                filter: this.filter,\n                ...this.searchKwargs,\n            }, runManager?.getChild(\"vectorstore\"));\n        }\n        return this.vectorStore.similaritySearch(query, this.k, this.filter, runManager?.getChild(\"vectorstore\"));\n    }\n    async addDocuments(documents, options) {\n        return this.vectorStore.addDocuments(documents, options);\n    }\n}\n/**\n * Abstract class representing a store of vectors. Provides methods for\n * adding vectors and documents, deleting from the store, and searching\n * the store.\n */\nexport class VectorStore extends Serializable {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(embeddings, dbConfig) {\n        super(dbConfig);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"vectorstores\", this._vectorstoreType()]\n        });\n        Object.defineProperty(this, \"embeddings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.embeddings = embeddings;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async delete(_params) {\n        throw new Error(\"Not implemented.\");\n    }\n    async similaritySearch(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n    ) {\n        const results = await this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n        return results.map((result) => result[0]);\n    }\n    async similaritySearchWithScore(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n    ) {\n        return this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n    }\n    static fromTexts(_texts, _metadatas, _embeddings, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _dbConfig) {\n        throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n    }\n    static fromDocuments(_docs, _embeddings, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _dbConfig) {\n        throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n    }\n    asRetriever(kOrFields, filter, callbacks, tags, metadata, verbose) {\n        if (typeof kOrFields === \"number\") {\n            return new VectorStoreRetriever({\n                vectorStore: this,\n                k: kOrFields,\n                filter,\n                tags: [...(tags ?? []), this._vectorstoreType()],\n                metadata,\n                verbose,\n                callbacks,\n            });\n        }\n        else {\n            const params = {\n                vectorStore: this,\n                k: kOrFields?.k,\n                filter: kOrFields?.filter,\n                tags: [...(kOrFields?.tags ?? []), this._vectorstoreType()],\n                metadata: kOrFields?.metadata,\n                verbose: kOrFields?.verbose,\n                callbacks: kOrFields?.callbacks,\n                searchType: kOrFields?.searchType,\n            };\n            if (kOrFields?.searchType === \"mmr\") {\n                return new VectorStoreRetriever({\n                    ...params,\n                    searchKwargs: kOrFields.searchKwargs,\n                });\n            }\n            return new VectorStoreRetriever({ ...params });\n        }\n    }\n}\n/**\n * Abstract class extending VectorStore with functionality for saving and\n * loading the vector store.\n */\nexport class SaveableVectorStore extends VectorStore {\n    static load(_directory, _embeddings) {\n        throw new Error(\"Not implemented\");\n    }\n}\n", "/**\n * Interface for interacting with a document.\n */\nexport class Document {\n    constructor(fields) {\n        Object.defineProperty(this, \"pageContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // The ID field is optional at the moment.\n        // It will likely become required in a future major release after\n        // it has been adopted by enough vectorstore implementations.\n        /**\n         * An optional identifier for the document.\n         *\n         * Ideally this should be unique across the document collection and formatted\n         * as a UUID, but this will not be enforced.\n         */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pageContent =\n            fields.pageContent !== undefined ? fields.pageContent.toString() : \"\";\n        this.metadata = fields.metadata ?? {};\n        this.id = fields.id;\n    }\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Czekanowski similarity between vectors a and b\n * @link [Czekanowski similarity](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function czekanowskiSimilarity(\n  a: NumberArray,\n  b: NumberArray,\n): number {\n  let up = 0;\n  let down = 0;\n  for (let i = 0; i < a.length; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return (2 * up) / down;\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Dice distance between vectors a and b\n * @link [Dice algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function dice(a: NumberArray, b: NumberArray): number {\n  let a2 = 0;\n  let b2 = 0;\n  let prod2 = 0;\n  for (let i = 0; i < a.length; i++) {\n    a2 += a[i] * a[i];\n    b2 += b[i] * b[i];\n    prod2 += (a[i] - b[i]) * (a[i] - b[i]);\n  }\n  return prod2 / (a2 + b2);\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Intersection distance between vectors a and b\n * @link [Intersection algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function intersection(a: NumberArray, b: NumberArray): number {\n  let ans = 0;\n  for (let i = 0; i < a.length; i++) {\n    ans += Math.min(a[i], b[i]);\n  }\n  return 1 - ans;\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n *Returns Kumar-Hassebrook similarity between vectors a and b\n * @link [Kumar-Hassebrook Similarity algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function kumarHassebrook(\n  a: NumberArray,\n  b: NumberArray,\n): number {\n  let p = 0;\n  let p2 = 0;\n  let q2 = 0;\n  for (let i = 0; i < a.length; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (p2 + q2 - p);\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n * Returns the Kulczynski distance between vectors a and b\n * @link [Kulczynski algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function kulczynski(a: NumberArray, b: NumberArray): number {\n  let up = 0;\n  let down = 0;\n  for (let i = 0; i < a.length; i++) {\n    up += Math.abs(a[i] - b[i]);\n    down += Math.min(a[i], b[i]);\n  }\n  return up / down;\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Motyka distance between vectors a and b\n * @link [Motyka algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function motyka(a: NumberArray, b: NumberArray): number {\n  let up = 0;\n  let down = 0;\n  for (let i = 0; i < a.length; i++) {\n    up += Math.min(a[i], b[i]);\n    down += a[i] + b[i];\n  }\n  return 1 - up / down;\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Squared Chord distance between vectors a and b\n * @link [Squared Chord algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function squaredChord(a: NumberArray, b: NumberArray): number {\n  let ans = 0;\n  for (let i = 0; i < a.length; i++) {\n    ans += (Math.sqrt(a[i]) - Math.sqrt(b[i])) ** 2;\n  }\n  return ans;\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Tanimoto similarity  between vectors p and q, and accepts the bitVector use, see the test case for an example\n * @link [Tanimoto similarity algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n * @param bitvector - bitVector\n *\n */\nexport default function tanimoto(\n  a: NumberArray,\n  b: NumberArray,\n  bitvector?: boolean,\n): number {\n  if (bitvector) {\n    let inter = 0;\n    let union = 0;\n    for (let j = 0; j < a.length; j++) {\n      inter += a[j] && b[j];\n      union += a[j] || b[j];\n    }\n    if (union === 0) {\n      return 1;\n    }\n    return inter / union;\n  } else {\n    let p = 0;\n    let q = 0;\n    let m = 0;\n    for (let i = 0; i < a.length; i++) {\n      p += a[i];\n      q += b[i];\n      m += Math.min(a[i], b[i]);\n    }\n    return 1 - (p + q - 2 * m) / (p + q - m);\n  }\n}\n", "// @ts-expect-error ml-tree-similarity is not typed\nimport * as tree from 'ml-tree-similarity';\n\nexport { tree };\n\nexport { default as cosine } from './similarities/cosine';\n\nexport { default as czekanowski } from './similarities/czekanowski';\n\nexport { default as dice } from './similarities/dice';\n\nexport { default as intersection } from './similarities/intersection';\n\nexport { default as kulczynski } from './similarities/kulczynski';\n\nexport { default as motyka } from './similarities/motyka';\n\nexport { default as pearson } from './similarities/pearson';\n\nexport { default as squaredChord } from './similarities/squaredChord';\n\nexport { default as tanimoto } from './similarities/tanimoto';\n\nexport { default as kumarHassebrook } from './similarities/kumarHassebrook';\n", "import { getSimilarity } from './getSimilarity';\n\nexport { createTree } from './createTree';\n\nexport function treeSimilarity(A, B, options = {}) {\n  return getSimilarity(A, B, options);\n}\n\nexport function getFunction(options = {}) {\n  return (A, B) => getSimilarity(A, B, options);\n}\n", "import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n\n  return mainCreateTree(\n    spectrum[0],\n    spectrum[1],\n    from,\n    to,\n    minWindow,\n    threshold\n  );\n}\n\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  }\n\n  // search first point\n  var start = binarySearch(X, from, ascending);\n  if (start < 0) {\n    start = ~start;\n  }\n\n  // stop at last point\n  var sum = 0;\n  var center = 0;\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n\n  if (sum < threshold) {\n    return null;\n  }\n\n  center /= sum;\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(\n        sum,\n        center,\n        mainCreateTree(X, Y, from, center, minWindow, threshold),\n        mainCreateTree(X, Y, center, to, minWindow, threshold)\n      );\n    }\n  }\n}\n\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n}\n", "import { createTree } from './createTree';\n\n/**\n * Similarity between two nodes\n * @param {Tree|Array<Array<number>>} a - tree A node\n * @param {Tree|Array<Array<number>>} b - tree B node\n * @param {object} [options]\n * @return {number} similarity measure between tree nodes\n */\nexport function getSimilarity(a, b, options = {}) {\n  const { alpha = 0.1, beta = 0.33, gamma = 0.001 } = options;\n\n  if (a === null || b === null) {\n    return 0;\n  }\n  if (Array.isArray(a)) {\n    a = createTree(a);\n  }\n  if (Array.isArray(b)) {\n    b = createTree(b);\n  }\n\n  var C =\n    (alpha * Math.min(a.sum, b.sum)) / Math.max(a.sum, b.sum) +\n    (1 - alpha) * Math.exp(-gamma * Math.abs(a.center - b.center));\n\n  return (\n    beta * C +\n    ((1 - beta) *\n      (getSimilarity(a.left, b.left, options) +\n        getSimilarity(a.right, b.right, options))) /\n      2\n  );\n}\n", "import { NumberArray } from 'cheminfo-types';\n/**\n * Returns the average of cosine distances between vectors a and b\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function cosine(a: NumberArray, b: NumberArray): number {\n  let p = 0;\n  let p2 = 0;\n  let q2 = 0;\n  for (let i = 0; i < a.length; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (Math.sqrt(p2) * Math.sqrt(q2));\n}\n", "import { NumberArray } from 'cheminfo-types';\n\nimport diceD from '../distances/dice';\n/**\n *Returns the Dice similarity between vectors a and b\n * @link [Dice similarity algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function dice(a: NumberArray, b: NumberArray): number {\n  return 1 - diceD(a, b);\n}\n", "import { NumberArray } from 'cheminfo-types';\n\nimport intersectionD from '../distances/intersection';\n/**\n *Returns the Intersection similarity distance between vectors a and b\n * @link [Intersection similarity algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function intersection(a: NumberArray, b: NumberArray): number {\n  return 1 - intersectionD(a, b);\n}\n", "import { NumberArray } from 'cheminfo-types';\n\nimport kulczynskiD from '../distances/kulczynski';\n/**\n *Returns the Kulczynski similarity between vectors a and b\n * @link [Kulczinski algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function kulczynski(a: NumberArray, b: NumberArray): number {\n  return 1 / kulczynskiD(a, b);\n}\n", "import { NumberArray } from 'cheminfo-types';\n\nimport motykaD from '../distances/motyka';\n/**\n *Returns the Motyka similarity between vectors a and b\n * @link [Motyka algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function motyka(a: NumberArray, b: NumberArray): number {\n  return 1 - motykaD(a, b);\n}\n", "// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n\nexport type AnyArray =\n  | any[] // eslint-disable-line @typescript-eslint/no-explicit-any\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value: unknown): value is AnyArray {\n  const tag = toString.call(value);\n  return tag.endsWith('Array]') && !tag.includes('Big');\n}\n", "import { isAnyArray } from 'is-any-array';\n\nfunction sum(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var sumValue = 0;\n\n  for (var i = 0; i < input.length; i++) {\n    sumValue += input[i];\n  }\n\n  return sumValue;\n}\n\nexport { sum as default };\n", "import sum from 'ml-array-sum';\n\nfunction mean(input) {\n  return sum(input) / input.length;\n}\n\nexport { mean as default };\n", "import { NumberArray } from 'cheminfo-types';\nimport mean from 'ml-array-mean';\n\nimport cosine from './cosine';\n\nexport default function pearson(a: NumberArray, b: NumberArray): number {\n  let avgA = mean(a);\n  let avgB = mean(b);\n\n  let newA = new Array(a.length);\n  let newB = new Array(b.length);\n  for (let i = 0; i < newA.length; i++) {\n    newA[i] = a[i] - avgA;\n    newB[i] = b[i] - avgB;\n  }\n\n  return cosine(newA, newB);\n}\n", "import { NumberArray } from 'cheminfo-types';\n\nimport squaredChordD from '../distances/squaredChord';\n/**\n *Returns the Squared-chord distance between vectors a and b\n * @link [Squared-chord algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function squaredChord(a: NumberArray, b: NumberArray): number {\n  return 1 - squaredChordD(a, b);\n}\n", "import { similarity as ml_distance_similarity, distance as ml_distance, } from \"ml-distance\";\n/**\n * Apply a row-wise function between two matrices with the same number of columns.\n *\n * @param {number[][]} X - The first matrix.\n * @param {number[][]} Y - The second matrix.\n * @param {VectorFunction} func - The function to apply.\n *\n * @throws {Error} If the number of columns in X and Y are not the same.\n *\n * @returns {number[][] | [[]]} A matrix where each row represents the result of applying the function between the corresponding rows of X and Y.\n */\nexport function matrixFunc(X, Y, func) {\n    if (X.length === 0 ||\n        X[0].length === 0 ||\n        Y.length === 0 ||\n        Y[0].length === 0) {\n        return [[]];\n    }\n    if (X[0].length !== Y[0].length) {\n        throw new Error(`Number of columns in X and Y must be the same. X has shape ${[\n            X.length,\n            X[0].length,\n        ]} and Y has shape ${[Y.length, Y[0].length]}.`);\n    }\n    return X.map((xVector) => Y.map((yVector) => func(xVector, yVector)).map((similarity) => Number.isNaN(similarity) ? 0 : similarity));\n}\nexport function normalize(M, similarity = false) {\n    const max = matrixMaxVal(M);\n    return M.map((row) => row.map((val) => (similarity ? 1 - val / max : val / max)));\n}\n/**\n * This function calculates the row-wise cosine similarity between two matrices with the same number of columns.\n *\n * @param {number[][]} X - The first matrix.\n * @param {number[][]} Y - The second matrix.\n *\n * @throws {Error} If the number of columns in X and Y are not the same.\n *\n * @returns {number[][] | [[]]} A matrix where each row represents the cosine similarity values between the corresponding rows of X and Y.\n */\nexport function cosineSimilarity(X, Y) {\n    return matrixFunc(X, Y, ml_distance_similarity.cosine);\n}\nexport function innerProduct(X, Y) {\n    return matrixFunc(X, Y, ml_distance.innerProduct);\n}\nexport function euclideanDistance(X, Y) {\n    return matrixFunc(X, Y, ml_distance.euclidean);\n}\n/**\n * This function implements the Maximal Marginal Relevance algorithm\n * to select a set of embeddings that maximizes the diversity and relevance to a query embedding.\n *\n * @param {number[]|number[][]} queryEmbedding - The query embedding.\n * @param {number[][]} embeddingList - The list of embeddings to select from.\n * @param {number} [lambda=0.5] - The trade-off parameter between relevance and diversity.\n * @param {number} [k=4] - The maximum number of embeddings to select.\n *\n * @returns {number[]} The indexes of the selected embeddings in the embeddingList.\n */\nexport function maximalMarginalRelevance(queryEmbedding, embeddingList, lambda = 0.5, k = 4) {\n    if (Math.min(k, embeddingList.length) <= 0) {\n        return [];\n    }\n    const queryEmbeddingExpanded = (Array.isArray(queryEmbedding[0]) ? queryEmbedding : [queryEmbedding]);\n    const similarityToQuery = cosineSimilarity(queryEmbeddingExpanded, embeddingList)[0];\n    const mostSimilarEmbeddingIndex = argMax(similarityToQuery).maxIndex;\n    const selectedEmbeddings = [embeddingList[mostSimilarEmbeddingIndex]];\n    const selectedEmbeddingsIndexes = [mostSimilarEmbeddingIndex];\n    while (selectedEmbeddingsIndexes.length < Math.min(k, embeddingList.length)) {\n        let bestScore = -Infinity;\n        let bestIndex = -1;\n        const similarityToSelected = cosineSimilarity(embeddingList, selectedEmbeddings);\n        similarityToQuery.forEach((queryScore, queryScoreIndex) => {\n            if (selectedEmbeddingsIndexes.includes(queryScoreIndex)) {\n                return;\n            }\n            const maxSimilarityToSelected = Math.max(...similarityToSelected[queryScoreIndex]);\n            const score = lambda * queryScore - (1 - lambda) * maxSimilarityToSelected;\n            if (score > bestScore) {\n                bestScore = score;\n                bestIndex = queryScoreIndex;\n            }\n        });\n        selectedEmbeddings.push(embeddingList[bestIndex]);\n        selectedEmbeddingsIndexes.push(bestIndex);\n    }\n    return selectedEmbeddingsIndexes;\n}\n/**\n * Finds the index of the maximum value in the given array.\n * @param {number[]} array - The input array.\n *\n * @returns {number} The index of the maximum value in the array. If the array is empty, returns -1.\n */\nfunction argMax(array) {\n    if (array.length === 0) {\n        return {\n            maxIndex: -1,\n            maxValue: NaN,\n        };\n    }\n    let maxValue = array[0];\n    let maxIndex = 0;\n    for (let i = 1; i < array.length; i += 1) {\n        if (array[i] > maxValue) {\n            maxIndex = i;\n            maxValue = array[i];\n        }\n    }\n    return { maxIndex, maxValue };\n}\nfunction matrixMaxVal(arrays) {\n    return arrays.reduce((acc, array) => Math.max(acc, argMax(array).maxValue), 0);\n}\n", "import { VectorStore, } from \"@langchain/core/vectorstores\";\nimport { Document } from \"@langchain/core/documents\";\nimport { maximalMarginalRelevance } from \"@langchain/core/utils/math\";\n/**\n * Class for interacting with a Supabase database to store and manage\n * vectors.\n */\nexport class SupabaseVectorStore extends VectorStore {\n    _vectorstoreType() {\n        return \"supabase\";\n    }\n    constructor(embeddings, args) {\n        super(embeddings, args);\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queryName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"upsertBatchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 500\n        });\n        this.client = args.client;\n        this.tableName = args.tableName || \"documents\";\n        this.queryName = args.queryName || \"match_documents\";\n        this.filter = args.filter;\n        this.upsertBatchSize = args.upsertBatchSize ?? this.upsertBatchSize;\n    }\n    /**\n     * Adds documents to the vector store.\n     * @param documents The documents to add.\n     * @param options Optional parameters for adding the documents.\n     * @returns A promise that resolves when the documents have been added.\n     */\n    async addDocuments(documents, options) {\n        const texts = documents.map(({ pageContent }) => pageContent);\n        return this.addVectors(await this.embeddings.embedDocuments(texts), documents, options);\n    }\n    /**\n     * Adds vectors to the vector store.\n     * @param vectors The vectors to add.\n     * @param documents The documents associated with the vectors.\n     * @param options Optional parameters for adding the vectors.\n     * @returns A promise that resolves with the IDs of the added vectors when the vectors have been added.\n     */\n    async addVectors(vectors, documents, options) {\n        const rows = vectors.map((embedding, idx) => ({\n            content: documents[idx].pageContent,\n            embedding,\n            metadata: documents[idx].metadata,\n        }));\n        // upsert returns 500/502/504 (yes really any of them) if given too many rows/characters\n        // ~2000 trips it, but my data is probably smaller than average pageContent and metadata\n        let returnedIds = [];\n        for (let i = 0; i < rows.length; i += this.upsertBatchSize) {\n            const chunk = rows.slice(i, i + this.upsertBatchSize).map((row, j) => {\n                if (options?.ids) {\n                    return { id: options.ids[i + j], ...row };\n                }\n                return row;\n            });\n            const res = await this.client.from(this.tableName).upsert(chunk).select();\n            if (res.error) {\n                throw new Error(`Error inserting: ${res.error.message} ${res.status} ${res.statusText}`);\n            }\n            if (res.data) {\n                returnedIds = returnedIds.concat(res.data.map((row) => row.id));\n            }\n        }\n        return returnedIds;\n    }\n    /**\n     * Deletes vectors from the vector store.\n     * @param params The parameters for deleting vectors.\n     * @returns A promise that resolves when the vectors have been deleted.\n     */\n    async delete(params) {\n        const { ids } = params;\n        for (const id of ids) {\n            await this.client.from(this.tableName).delete().eq(\"id\", id);\n        }\n    }\n    async _searchSupabase(query, k, filter) {\n        if (filter && this.filter) {\n            throw new Error(\"cannot provide both `filter` and `this.filter`\");\n        }\n        const _filter = filter ?? this.filter ?? {};\n        const matchDocumentsParams = {\n            query_embedding: query,\n        };\n        let filterFunction;\n        if (typeof _filter === \"function\") {\n            filterFunction = (rpcCall) => _filter(rpcCall).limit(k);\n        }\n        else if (typeof _filter === \"object\") {\n            matchDocumentsParams.filter = _filter;\n            matchDocumentsParams.match_count = k;\n            filterFunction = (rpcCall) => rpcCall;\n        }\n        else {\n            throw new Error(\"invalid filter type\");\n        }\n        const rpcCall = this.client.rpc(this.queryName, matchDocumentsParams);\n        const { data: searches, error } = await filterFunction(rpcCall);\n        if (error) {\n            throw new Error(`Error searching for documents: ${error.code} ${error.message} ${error.details}`);\n        }\n        return searches;\n    }\n    /**\n     * Performs a similarity search on the vector store.\n     * @param query The query vector.\n     * @param k The number of results to return.\n     * @param filter Optional filter to apply to the search.\n     * @returns A promise that resolves with the search results when the search is complete.\n     */\n    async similaritySearchVectorWithScore(query, k, filter) {\n        const searches = await this._searchSupabase(query, k, filter);\n        const result = searches.map((resp) => [\n            new Document({\n                metadata: resp.metadata,\n                pageContent: resp.content,\n            }),\n            resp.similarity,\n        ]);\n        return result;\n    }\n    /**\n     * Return documents selected using the maximal marginal relevance.\n     * Maximal marginal relevance optimizes for similarity to the query AND diversity\n     * among selected documents.\n     *\n     * @param {string} query - Text to look up documents similar to.\n     * @param {number} options.k - Number of documents to return.\n     * @param {number} options.fetchK=20- Number of documents to fetch before passing to the MMR algorithm.\n     * @param {number} options.lambda=0.5 - Number between 0 and 1 that determines the degree of diversity among the results,\n     *                 where 0 corresponds to maximum diversity and 1 to minimum diversity.\n     * @param {SupabaseLibArgs} options.filter - Optional filter to apply to the search.\n     *\n     * @returns {Promise<Document[]>} - List of documents selected by maximal marginal relevance.\n     */\n    async maxMarginalRelevanceSearch(query, options) {\n        const queryEmbedding = await this.embeddings.embedQuery(query);\n        const searches = await this._searchSupabase(queryEmbedding, options.fetchK ?? 20, options.filter);\n        const embeddingList = searches.map((searchResp) => searchResp.embedding);\n        const mmrIndexes = maximalMarginalRelevance(queryEmbedding, embeddingList, options.lambda, options.k);\n        return mmrIndexes.map((idx) => new Document({\n            metadata: searches[idx].metadata,\n            pageContent: searches[idx].content,\n        }));\n    }\n    /**\n     * Creates a new SupabaseVectorStore instance from an array of texts.\n     * @param texts The texts to create documents from.\n     * @param metadatas The metadata for the documents.\n     * @param embeddings The embeddings to use.\n     * @param dbConfig The configuration for the Supabase database.\n     * @returns A promise that resolves with a new SupabaseVectorStore instance when the instance has been created.\n     */\n    static async fromTexts(texts, metadatas, embeddings, dbConfig) {\n        const docs = [];\n        for (let i = 0; i < texts.length; i += 1) {\n            const metadata = Array.isArray(metadatas) ? metadatas[i] : metadatas;\n            const newDoc = new Document({\n                pageContent: texts[i],\n                metadata,\n            });\n            docs.push(newDoc);\n        }\n        return SupabaseVectorStore.fromDocuments(docs, embeddings, dbConfig);\n    }\n    /**\n     * Creates a new SupabaseVectorStore instance from an array of documents.\n     * @param docs The documents to create the instance from.\n     * @param embeddings The embeddings to use.\n     * @param dbConfig The configuration for the Supabase database.\n     * @returns A promise that resolves with a new SupabaseVectorStore instance when the instance has been created.\n     */\n    static async fromDocuments(docs, embeddings, dbConfig) {\n        const instance = new this(embeddings, dbConfig);\n        await instance.addDocuments(docs);\n        return instance;\n    }\n    /**\n     * Creates a new SupabaseVectorStore instance from an existing index.\n     * @param embeddings The embeddings to use.\n     * @param dbConfig The configuration for the Supabase database.\n     * @returns A promise that resolves with a new SupabaseVectorStore instance when the instance has been created.\n     */\n    static async fromExistingIndex(embeddings, dbConfig) {\n        const instance = new this(embeddings, dbConfig);\n        return instance;\n    }\n}\n"],
  "mappings": "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",
  "names": ["dice", "intersection", "kulczynski", "motyka", "pearson", "squaredChord", "binarySearch", "sum", "dice", "intersection", "kulczynski", "motyka", "pearson", "squaredChord", "rpcCall"]
}
